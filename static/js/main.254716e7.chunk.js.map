{"version":3,"sources":["theme.js","serviceWorker.js","components/Notifications/NotificationListItem.js","components/Notifications/NotificationList.js","services/NotificationsService.js","components/App/App.js","index.js"],"names":["theme","createMuiTheme","Boolean","window","location","hostname","match","NotificationListItem","classes","listRef","notification","index","onRead","useInView","root","current","threshold","triggerOnce","ref","inView","useEffect","ListItem","className","clsx","item","read","item_read","ListItemAvatar","Avatar","ListItemText","primary","name","secondary","description","withStyles","flexGrow","overflowY","padding","backgroundColor","fade","palette","light","background","paper","notifications","useRef","List","map","i","key","id","nextId","getRandomInt","min","max","Math","ceil","floor","random","header","content","paddingTop","paddingBottom","heading","notificationsPaper","width","maxHeight","overflow","display","flexDirection","notificationsHeading","flexShrink","spacing","notificationsContent","fab","position","bottom","right","useState","notificationsOpen","setNotificationsOpen","setNotifications","unreadNotificationsCount","setUnreadNotificationsCount","count","forEach","AppBar","Container","maxWidth","Toolbar","disableGutters","Typography","variant","IconButton","color","edge","onClick","Badge","badgeContent","Popover","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","marginThreshold","keepMounted","open","onClose","newNotifications","paragraph","Link","href","Fab","loremIpsum","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.254716e7.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nconst theme = createMuiTheme({\r\n\r\n})\r\n\r\nexport default theme\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useEffect  } from 'react'\r\nimport { useInView } from 'react-intersection-observer'\r\nimport clsx from 'clsx'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\n\r\n\r\nfunction NotificationListItem({ classes, listRef, notification, index, onRead }) {\r\n\r\n    const [ ref, inView ]= useInView({\r\n        root: listRef.current,\r\n        threshold: 0.9,\r\n        triggerOnce: true,\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (inView) {\r\n            onRead(notification, index)\r\n        }\r\n    }, [inView])\r\n\r\n    return (\r\n        <ListItem\r\n            ref={ref}\r\n            className={clsx(classes.item, (inView || notification.read) && classes.item_read)}\r\n        >\r\n\r\n            <ListItemAvatar>\r\n                <Avatar>\r\n                    A\r\n                </Avatar>\r\n            </ListItemAvatar>\r\n\r\n            <ListItemText\r\n                primary={notification.name}\r\n                secondary={notification.description}\r\n            />\r\n\r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default NotificationListItem\r\n","import React, { useRef, useState } from 'react'\r\nimport { withStyles, fade } from '@material-ui/core/styles'\r\nimport List from '@material-ui/core/List'\r\nimport NotificationListItem from './NotificationListItem'\r\n\r\nfunction NotificationList({ classes, notifications, onRead }) {\r\n    const ref= useRef(null)\r\n    return (\r\n        <List\r\n            ref={ref}\r\n            className={classes.root}\r\n        >\r\n            {notifications.map((notification, i) => (\r\n                <NotificationListItem\r\n                    key={notification.id}\r\n                    classes={classes}\r\n                    listRef={ref}\r\n                    notification={notification}\r\n                    index={i}\r\n                    onRead={onRead}\r\n                >\r\n                    notif\r\n                </NotificationListItem>\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\n\r\nconst styles= (theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        overflowY: 'auto',\r\n        padding: 0,\r\n    },\r\n    item: {\r\n        backgroundColor: fade(theme.palette.primary.light, 0.23),\r\n    },\r\n    item_read: {\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n})\r\n\r\nexport default withStyles(styles)(\r\n    NotificationList\r\n)","import * as loremIpsum from 'fast-lorem-ipsum'\r\n\r\nlet nextId= 1\r\n\r\nexport function createNotification() {\r\n    return {\r\n        id: nextId++,\r\n        name: loremIpsum(getRandomInt(3, 13),'w'),\r\n        description: loremIpsum(getRandomInt(3, 7),'w')\r\n    }\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min)\r\n    max = Math.floor(max)\r\n    return Math.floor(Math.random() * (max - min)) + min\r\n}\r\n","import React, { useRef, useState, useEffect } from 'react'\nimport withStyles from '@material-ui/core/styles/withStyles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport IconButton from '@material-ui/core/IconButton'\nimport NotificationsOutlinedIcon from '@material-ui/icons/NotificationsOutlined'\nimport NotificationsIcon from '@material-ui/icons/Notifications'\nimport AddAlertIcon from '@material-ui/icons/AddAlert'\nimport Popover from '@material-ui/core/Popover'\nimport Fab from '@material-ui/core/Fab'\nimport Badge from '@material-ui/core/Badge'\nimport NotificationList from '../Notifications/NotificationList'\nimport { createNotification } from '../../services/NotificationsService'\nimport Container from '@material-ui/core/Container'\nimport Link from '@material-ui/core/Link'\n\nfunction App({ classes }) {\n    const ref= useRef(null)\n    const [ notificationsOpen, setNotificationsOpen ]= useState(false)\n    const [ notifications, setNotifications ]= useState([])\n    const [ unreadNotificationsCount, setUnreadNotificationsCount ]= useState(0)\n    useEffect(() => {\n        let count= 0\n        notifications.forEach((notification) => {\n            if (!notification.read) {\n                count++\n            }\n        })\n        setUnreadNotificationsCount(count)\n    }, [notifications])\n    return (\n        <div>\n            <AppBar className={classes.header}>\n                <Container maxWidth={false}>\n                    <Toolbar disableGutters>\n                        <Typography className={classes.heading} variant=\"h6\">Intersection Observer API</Typography>\n                        <IconButton\n                            ref={ref}\n                            color=\"inherit\"\n                            edge=\"end\"\n                            onClick={() => {\n                                setNotificationsOpen(!notificationsOpen)\n                            }}\n                        >\n                            <Badge color=\"secondary\" badgeContent={unreadNotificationsCount}>\n                                {unreadNotificationsCount > 0 ? (\n                                    <NotificationsIcon />\n                                ) : (\n                                    <NotificationsOutlinedIcon/>\n                                )}\n                            </Badge>\n                        </IconButton>\n                        <Popover\n                            classes={{\n                                paper: classes.notificationsPaper,\n                            }}\n                            anchorEl={ref.current}\n                            anchorOrigin={{\n                                vertical: 'bottom',\n                                horizontal: 'right',\n                            }}\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'center',\n                            }}\n                            marginThreshold={8}\n                            keepMounted={false}\n                            open={notificationsOpen}\n                            onClose={() => {\n                                setNotificationsOpen(false)\n                            }}\n                        >\n                            <div className={classes.notificationsHeading}><Typography variant=\"h6\">Notifications</Typography></div>\n                            <NotificationList\n                                notifications={notifications}\n                                onRead={(notification, i) => {\n                                    const newNotifications= [...notifications]\n                                    newNotifications[i]= {\n                                        ...newNotifications[i],\n                                        read: true,\n                                    }\n                                    setNotifications(newNotifications)\n                                    //setUnreadNotificationsCount(unreadNotificationsCount - 1)\n                                }}\n                            />\n                        </Popover>\n                    </Toolbar>\n                </Container>\n            </AppBar>\n            <Container className={classes.content} maxWidth={false}>\n                <Typography variant=\"h4\" paragraph>\n                    Пример использования\n                </Typography>\n                <Typography variant=\"body1\" paragraph>\n                    Intersection Observer API позволяет веб-приложениям асинхронно следить за изменением пересечения элемента с его родителем или областью видимости документа.\n                </Typography>\n                <Typography variant=\"body1\" paragraph>\n                    Исторически обнаружение видимости отдельного элемента или видимости двух элементов по отношению друг к другу было непростой задачей. Варианты решения этой задачи были ненадежными и замедляли работу браузера. К несчастью, по мере того как веб «взрослел», потребность в решении этой проблемы только росла.\n                </Typography>\n                <Typography variant=\"body1\" paragraph>\n                    В прошлом реализация обнаружения пересечения элементов подразумевала использование обработчиков событий и циклов, вызывающих методы типа Element.getBoundingClientRect(), чтобы собрать необходимую информацию о каждом затронутом элементе. Поскольку весь этот код работает в основном потоке, возникают проблемы с производительностью.\n                </Typography>\n                <Typography variant=\"body1\" paragraph>\n                    Intersection Observer API даёт возможность зарегистрировать callback-функцию, которая выполнится при пересечении наблюдаемым элементом границ другого элемента (или области видимости документа viewport), либо при изменении величины пересечения на опредённое значение. Таким образом, больше нет необходимости вычислять пересечение элементов в основном потоке, и браузер может оптимизировать эти процессы на своё усмотрение.\n                </Typography>\n                <Typography variant=\"body1\" paragraph>\n                    Observer API не позволит узнать точное число пикселей или определить конкретные пиксели в пересечении; однако, его использование покрывает наиболее частые сценарии вроде «Если элементы пересекаются на N%, сделай то-то».\n                </Typography>\n                <Link variant=\"body1\" paragraph href=\"https://developer.mozilla.org/ru/docs/Web/API/Intersection_Observer_API\">\n                    Intersection Observer API...\n                </Link>\n            </Container>\n            <Fab\n                className={classes.fab}\n                color=\"primary\"\n                onClick={() => {\n                    setNotifications([\n                        createNotification(),\n                        ...notifications,\n                    ])\n                }}\n            >\n                <AddAlertIcon/>\n            </Fab>\n        </div>\n    )\n}\n\nconst styles= (theme) => ({\n    header: {\n\n    },\n    content: {\n        paddingTop: 56 + 16,\n        paddingBottom: 16,\n        '@media (min-width: 0px) and (orientation: landscape)': {\n            paddingTop: 48 + 16,\n        },\n        '@media (min-width: 600px)': {\n            paddingTop: 64 + 16,\n        },\n    },\n    heading: {\n        flexGrow: 1,\n    },\n    notificationsPaper: {\n        width: 420,\n        maxHeight: '73vh',\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    notificationsHeading: {\n        flexShrink: 0,\n        padding: theme.spacing(1, 2)\n    },\n    notificationsContent: {\n        flexGrow: 1,\n        overflowY: 'auto',\n    },\n    fab: {\n        position: 'fixed',\n        bottom: 32,\n        right: 32,\n    }\n})\n\nexport default withStyles(styles)(\n    App\n)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport theme from './theme'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport App from './components/App/App'\n\nReactDOM.render((\n    <ThemeProvider theme={theme}>\n        <CssBaseline/>\n        <App/>\n    </ThemeProvider>\n), document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}